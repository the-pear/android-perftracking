apply plugin: 'groovy'

sourceCompatibility = 1.7
targetCompatibility = 1.7

buildscript {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url ARTIFACTORY_RELEASE
        }
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:2.2.2'
        classpath 'jp.co.rakuten.sdtd.plugin:artifactory:1.3.0'
    }
}

// Quick-and-dirty way of adding both Stubs and Core without dealing with jarsâ€¦
sourceSets {
    main {
        java {
            srcDirs += "$rootProject.projectDir/Stubs/src/main/java"
            srcDirs += "$rootProject.projectDir/Core/src/main/java"
        }
    }
}

// Inject the version number into the resources
import org.apache.tools.ant.filters.*
afterEvaluate {
    configure(allProcessResourcesTasks()) {
        filter(ReplaceTokens, tokens: [
            version:    project.MODULE_VERSION,
            runtime:    "com.rakuten.tech.mobile.perf:runtime:$project.MODULE_VERSION".toString(),
            repository: project.ARTIFACTORY_RELEASE
        ])
    }
}
def allProcessResourcesTasks() {
    sourceSets*.processResourcesTaskName.collect { tasks[it] }
}

dependencies {
    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url ARTIFACTORY_RELEASE
        }
        maven {
            url ARTIFACTORY_SNAPSHOT
        }
    }

    compile gradleApi()
    compile localGroovy()
    compile 'com.android.tools.build:gradle:2.2.2'
    compile 'org.ow2.asm:asm-all:5.1'
}

// -- ARTIFACTORY --

apply plugin: 'jp.co.rakuten.sdtd.artifactory'

artifactory {
    group = project.MODULE_GROUP
    artifact = project.MODULE_NAME
    version = project.MODULE_VERSION
    description = project.MODULE_DESCRIPTION
    sourceUrl = project.MODULE_REPOSITORY
}

// -- LOCAL MAVEN --

apply plugin: 'maven-publish'
publishing {
    publications {
        local(MavenPublication) {
            groupId     project.MODULE_GROUP
            artifactId  project.MODULE_NAME
            version     project.MODULE_VERSION
            artifact("$buildDir/libs/Plugin-${project.MODULE_VERSION}.jar")
        }
    }
}

tasks.publishToMavenLocal.dependsOn(tasks.assemble)

// testing
buildscript {
    dependencies {
        classpath "net.saliman:gradle-cobertura-plugin:2.4.0"
    }
}

dependencies {
    testCompile gradleTestKit()
    testCompile 'junit:junit:4.12'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

// local jar and sources jar to debug local code changes
tasks.test.dependsOn(tasks.assemble)
tasks.test.dependsOn(tasks.sourcesJar)

tasks.test.doFirst {
    def tempDir = new File("${project.projectDir}${File.separator}tmp")
    println "creating temporary test directory $tempDir.absolutePath"
    if(!tempDir.exists()) tempDir.mkdir()
}

task myTask << {
    println "${project.projectDir}${File.separator}tmp"
}

tasks.test.doLast {
    def tempDir = new File("${project.projectDir}${File.separator}tmp")
    println "deleting temporary test directory $tempDir.absolutePath"
    if(tempDir.exists()) tempDir.deleteDir()
}

apply plugin: 'net.saliman.cobertura'
// see https://github.com/stevesaliman/gradle-cobertura-plugin/blob/master/usage.md

cobertura { // see https://github.com/stevesaliman/gradle-cobertura-plugin/blob/master/usage.md
    coverageDirs = [
            'src/main/groovy'
    ]
    coverageExcludes = [
            '.*android.*',
            '.*com.android.*',
            '.*com.rakuten.tech.mobile.perf.core.*',
            '.*it.sephiroth.*',
            '.*org.apache.http.*',
            '.*net.saliman.someapp.logger.*'
    ]
    coverageIgnoreTrivial = true
    coverageCheckLineRate = 80
    coverageCheckTotalBranchRate = 80
    // TODO: enable when covered
    // could use fine grained config with coverageCheckRegexes...
//    coverageCheckHaltOnFailure = true
    // TODO: define target branch rate
//    coverageCheckBranchRate = 80
}

