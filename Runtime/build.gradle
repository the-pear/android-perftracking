apply plugin: 'com.android.library'

android {
  compileSdkVersion CONFIG.versions.android.sdk.compile
  buildToolsVersion CONFIG.versions.android.tools

  defaultConfig {
    minSdkVersion CONFIG.versions.android.sdk.min
    targetSdkVersion CONFIG.versions.android.sdk.target
    versionName project.version
    resValue 'string', 'perftracking__version', project.version

    def property = { name ->
      project.hasProperty(name) ? project."${name}" : "";
    }

    buildConfigField("String", "DEFAULT_CONFIG_URL_PREFIX", "\"${property('DEFAULT_CONFIG_URL_PREFIX')}\"")
    buildConfigField("String", "DEFAULT_LOCATION_URL_PREFIX", "\"${property('DEFAULT_LOCATION_URL_PREFIX')}\"")
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_7
    targetCompatibility JavaVersion.VERSION_1_7
  }

  defaultConfig {
    consumerProguardFiles 'proguard-rules.pro'
  }

  testOptions {
    unitTests.all {
      jacoco {
        includeNoLocationClasses = true
      }
    }
  }
}

apply from: '../config-internal/publish/android.gradle'
publishing {
  publications {
    runtime(MavenPublication, androidArtifact(artifactId: 'performance-tracking'))
  }
}

configurations { copyJar }

task copyJar(type: Copy) {
  from configurations.copyJar
  into 'libs'
}

android.libraryVariants.all {
  project.tasks["generate${it.buildType.name.capitalize()}Sources"].dependsOn copyJar
}

dependencies {
  copyJar project(':Core')
  compile files("libs/Core-${project.version}.jar")

  compile "com.android.support:support-annotations:$CONFIG.versions.android.libraries.support"
  compile "com.google.code.gson:gson:${CONFIG.versions.thirdParty.gson}"
  compile "com.android.volley:volley:${CONFIG.versions.android.libraries.volley}"

  testCompile 'junit:junit:4.12'
  testCompile 'org.assertj:assertj-core:2.6.0'
  testCompile 'org.skyscreamer:jsonassert:1.2.3'
  testCompile "org.mockito:mockito-core:2.7.22"
  testCompile "org.robolectric:shadows-support-v4:3.3.2"
  testCompile 'org.robolectric:shadows-httpclient:3.3.2'
  testCompile('org.robolectric:robolectric:3.3.2') {
    exclude group: 'commons-logging', module: 'commons-logging'
  }
  testCompile 'org.robolectric:shadow-api:3.3.2'
  testCompile 'com.squareup.okio:okio:1.12.0'
}

apply from: "../config/quality/jacoco/android.gradle"
apply from: "../config/quality/checkstyle/android.gradle"
apply from: "../config/quality/pmd/android.gradle"

checkstyle { // TODO: fix all findbugs warnings
  ignoreFailures = true
}

pmd { // TODO: fix all findbugs warnings
  ignoreFailures = true
}

apply from: '../config-internal/javadoc.gradle'
javadoc { 
  name = 'performance-tracking'
  exclude = ['**/Measurement.java'] 
}

task checkUrlPrefixes {
  doLast {
    if(System.env.CI && System.env.CIRCLECI) {
      println "allow empty URL prefixes for location and config APIs on circleCI build jobs"
    } else if (!project.hasProperty('DEFAULT_CONFIG_URL_PREFIX') ||
        !project.hasProperty('DEFAULT_LOCATION_URL_PREFIX')) {
      throw new GradleException("Cannot Bulid Runtime without default config & location API" +
          " prexfixes.\nConfigure 'DEFAULT_CONFIG_URL_PREFIX' and " +
          "'DEFAULT_LOCATION_URL_PREFIX' in your environment's global gradle.properties")
    }
  }
}

tasks.whenTaskAdded { task ->
  if (task.name.contains("assemble")) {
    task.dependsOn checkUrlPrefixes
  }
}